"""
Question Service
Business logic for Q&A questions management
"""
from typing import Dict, List, Optional, Any
from datetime import datetime
from sqlalchemy.exc import SQLAlchemyError
import logging

from app.dao.question_dao import QuestionDAO
from app.dao.tag_dao import TagDAO
from app.dao.vote_dao import VoteDAO
from app.dao.comment_dao import CommentDAO
from app.models.qa import Question
from app.models.tag import Tag
from app.exceptions.base import ValidationException, BusinessLogicException
from app import db

# Setup logging
logger = logging.getLogger(__name__)


class QuestionService:
    """Service class cho question operations"""
    
    def __init__(self):
        self.question_dao = QuestionDAO()
        self.tag_dao = TagDAO()
        self.vote_dao = VoteDAO()
        self.comment_dao = CommentDAO()
    
    def get_questions(self, page=1, per_page=20, sort_by='newest', sort_order='desc', filters=None, user_id=None):
        """
        L·∫•y danh s√°ch c√¢u h·ªèi v·ªõi ph√¢n trang v√† l·ªçc
        
        Args:
            page: S·ªë trang
            per_page: S·ªë c√¢u h·ªèi m·ªói trang
            sort_by: S·∫Øp x·∫øp theo
            sort_order: Th·ª© t·ª± s·∫Øp x·∫øp (asc/desc)
            filters: B·ªô l·ªçc
            user_id: ID ng∆∞·ªùi d√πng hi·ªán t·∫°i
            
        Returns:
            dict: K·∫øt qu·∫£ ph√¢n trang
        """
        try:
            # Validate pagination
            page = max(1, int(page))
            per_page = min(50, max(1, int(per_page)))
            
            # Validate sort
            valid_sorts = ['newest', 'oldest', 'votes', 'views', 'answers', 'activity']
            if sort_by not in valid_sorts:
                sort_by = 'newest'
            
            # Process filters
            processed_filters = self._process_filters(filters or {})
            
            # Get questions from DAO
            result = self.question_dao.get_questions_with_pagination(
                page=page,
                per_page=per_page,
                filters=processed_filters,
                sort_by=sort_by,
                sort_order=sort_order,
                user_id=user_id
            )
            
            return {
                'success': True,
                'data': result
            }
            
        except Exception as e:
            raise ValidationException(f"L·ªói khi l·∫•y danh s√°ch c√¢u h·ªèi: {str(e)}")
    
    def get_question_by_id(self, question_id, user_id=None):
        """
        L·∫•y chi ti·∫øt c√¢u h·ªèi theo ID
        
        Args:
            question_id: ID c√¢u h·ªèi
            user_id: ID ng∆∞·ªùi d√πng (ƒë·ªÉ ki·ªÉm tra quy·ªÅn)
            
        Returns:
            dict: Chi ti·∫øt c√¢u h·ªèi
        """
        try:
            question = self.question_dao.get_question_by_id(question_id)
            
            if not question:
                raise ValidationException("Kh√¥ng t√¨m th·∫•y c√¢u h·ªèi")
            
            # TƒÉng view count n·∫øu kh√¥ng ph·∫£i t√°c gi·∫£
            if user_id != question['author']['id']:
                self.question_dao.increment_view_count(question_id)
                question['viewCount'] += 1
            
            # L·∫•y th√¥ng tin vote c·ªßa user
            if user_id:
                user_vote = self.vote_dao.get_user_vote(user_id, 'question', question_id)
                question['userVote'] = user_vote.vote_type if user_vote else None
            else:
                question['userVote'] = None
            
            # L·∫•y tag c·ªßa question
            tags = self.tag_dao.get_question_tags(question_id)
            question['tags'] = [tag.to_dict() for tag in tags]
            
            return {
                'success': True,
                'data': question
            }
            
        except ValidationException:
            raise
        except Exception as e:
            raise ValidationException(f"L·ªói khi l·∫•y chi ti·∫øt c√¢u h·ªèi: {str(e)}")
    
    def create_question(self, user_id, data):
        """
        T·∫°o c√¢u h·ªèi m·ªõi
        
        Args:
            user_id: ID ng∆∞·ªùi t·∫°o
            data: D·ªØ li·ªáu c√¢u h·ªèi
            
        Returns:
            dict: C√¢u h·ªèi ƒë∆∞·ª£c t·∫°o
        """
        try:
            logger.info(f"üöÄ Starting create_question - user_id: {user_id}, data: {data}")
            
            # Validate required fields
            logger.info("üìù Validating question data...")
            self._validate_question_data(data)
            logger.info("‚úÖ Question data validation passed")
            
            # Create question
            logger.info("üíæ Creating question in database...")
            logger.info(f"üìã Question params - title: {data['title']}, content length: {len(data['content'])}, author_id: {user_id}")
            logger.info(f"üìã Optional params - category: {data.get('category')}, scope: {data.get('scope', 'lesson')}, scope_id: {data.get('scope_id', 0)}")
            
            question = self.question_dao.create_question(
                title=data['title'],
                content=data['content'],
                author_id=user_id,
                category=data.get('category'),
                scope=data.get('scope', 'lesson'),
                scope_id=data.get('scope_id', 0)
            )
            logger.info(f"‚úÖ Question created successfully with ID: {question.id}")

            # Add tags if provided
            if data.get('tags'):
                logger.info(f"üè∑Ô∏è Processing tags: {data['tags']}")
                self._process_question_tags(question.id, data['tags'])
                logger.info("‚úÖ Tags processed successfully")

            # Get formatted question data
            logger.info("üìä Getting formatted question data...")
            question_data = self.question_dao.get_question_by_id(question.id)
            logger.info("‚úÖ Question data retrieved successfully")

            result = {
                'success': True,
                'data': question_data,
                'message': 'C√¢u h·ªèi ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng'
            }
            logger.info(f"üéâ create_question completed successfully: {result}")
            return result
            
        except ValidationException as ve:
            logger.error(f"‚ùå ValidationException in create_question: {str(ve)}")
            raise
        except Exception as e:
            logger.error(f"üí• Unexpected error in create_question: {str(e)}")
            logger.error(f"üîç Error type: {type(e).__name__}")
            import traceback
            logger.error(f"üìö Full traceback: {traceback.format_exc()}")
            db.session.rollback()
            raise ValidationException(f"L·ªói khi t·∫°o c√¢u h·ªèi: {str(e)}")
    
    def update_question(self, question_id, user_id, data):
        """
        C·∫≠p nh·∫≠t c√¢u h·ªèi
        
        Args:
            question_id: ID c√¢u h·ªèi
            user_id: ID ng∆∞·ªùi c·∫≠p nh·∫≠t
            data: D·ªØ li·ªáu m·ªõi
            
        Returns:
            dict: C√¢u h·ªèi ƒë√£ c·∫≠p nh·∫≠t
        """
        try:
            # Check permission
            question = self.question_dao.get_question_by_id(question_id)
            if not question:
                raise ValidationException("Kh√¥ng t√¨m th·∫•y c√¢u h·ªèi")
            
            if question['author']['id'] != user_id:
                raise ValidationException("B·∫°n kh√¥ng c√≥ quy·ªÅn ch·ªânh s·ª≠a c√¢u h·ªèi n√†y")
            
            # Validate data
            self._validate_question_data(data, is_update=True)
            
            # Update question
            updated = self.question_dao.update_question(
                question_id=question_id,
                title=data.get('title'),
                content=data.get('content'),
                category=data.get('category')
            )
            
            if not updated:
                raise ValidationException("Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t c√¢u h·ªèi")
            
            # Update tags if provided
            if 'tags' in data:
                self._process_question_tags(question_id, data['tags'])
            
            # Get updated question data
            question_data = self.question_dao.get_question_by_id(question_id)
            
            return {
                'success': True,
                'data': question_data,
                'message': 'C√¢u h·ªèi ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng'
            }
            
        except ValidationException:
            raise
        except Exception as e:
            db.session.rollback()
            raise ValidationException(f"L·ªói khi c·∫≠p nh·∫≠t c√¢u h·ªèi: {str(e)}")
    
    def delete_question(self, question_id, user_id):
        """
        X√≥a c√¢u h·ªèi
        
        Args:
            question_id: ID c√¢u h·ªèi
            user_id: ID ng∆∞·ªùi x√≥a
            
        Returns:
            dict: K·∫øt qu·∫£ x√≥a
        """
        try:
            # Check permission
            question = self.question_dao.get_question_by_id(question_id)
            if not question:
                raise ValidationException("Kh√¥ng t√¨m th·∫•y c√¢u h·ªèi")
            
            if question['author']['id'] != user_id:
                raise ValidationException("B·∫°n kh√¥ng c√≥ quy·ªÅn x√≥a c√¢u h·ªèi n√†y")
            
            # Delete question
            deleted = self.question_dao.delete_question(question_id)
            
            if not deleted:
                raise ValidationException("Kh√¥ng th·ªÉ x√≥a c√¢u h·ªèi")
            
            return {
                'success': True,
                'message': 'C√¢u h·ªèi ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng'
            }
            
        except ValidationException:
            raise
        except Exception as e:
            db.session.rollback()
            raise ValidationException(f"L·ªói khi x√≥a c√¢u h·ªèi: {str(e)}")
    
    def vote_question(self, question_id, user_id, vote_type):
        """
        Vote cho c√¢u h·ªèi
        
        Args:
            question_id: ID c√¢u h·ªèi
            user_id: ID ng∆∞·ªùi vote
            vote_type: Lo·∫°i vote (upvote, downvote)
            
        Returns:
            dict: K·∫øt qu·∫£ vote
        """
        try:
            # Validate vote type
            if vote_type not in ['upvote', 'downvote']:
                raise ValidationException("Lo·∫°i vote kh√¥ng h·ª£p l·ªá")
            
            # Check if question exists
            question = self.question_dao.get_question_by_id(question_id)
            if not question:
                raise ValidationException("Kh√¥ng t√¨m th·∫•y c√¢u h·ªèi")
            
            # Check if user is not the author
            if question['author']['id'] == user_id:
                raise ValidationException("B·∫°n kh√¥ng th·ªÉ vote cho c√¢u h·ªèi c·ªßa ch√≠nh m√¨nh")
            
            # Cast vote
            vote = self.vote_dao.cast_vote(user_id, 'question', question_id, vote_type)
            
            # Get updated vote score
            vote_score = self.vote_dao.get_vote_score('question', question_id)
            
            return {
                'success': True,
                'data': {
                    'voteScore': vote_score,
                    'userVote': vote.vote_type if vote else None
                },
                'message': f'ƒê√£ {vote_type} c√¢u h·ªèi'
            }
            
        except ValidationException:
            raise
        except Exception as e:
            db.session.rollback()
            raise ValidationException(f"L·ªói khi vote c√¢u h·ªèi: {str(e)}")
    
    def search_questions(self, search_term, page=1, per_page=20, filters=None):
        """
        T√¨m ki·∫øm c√¢u h·ªèi
        
        Args:
            search_term: T·ª´ kh√≥a t√¨m ki·∫øm
            page: S·ªë trang
            per_page: S·ªë c√¢u h·ªèi m·ªói trang
            filters: B·ªô l·ªçc b·ªï sung
            
        Returns:
            dict: K·∫øt qu·∫£ t√¨m ki·∫øm
        """
        try:
            if not search_term or len(search_term.strip()) < 2:
                raise ValidationException("T·ª´ kh√≥a t√¨m ki·∫øm ph·∫£i c√≥ √≠t nh·∫•t 2 k√Ω t·ª±")
            
            # Validate pagination
            page = max(1, int(page))
            per_page = min(50, max(1, int(per_page)))
            
            # Search questions
            result = self.question_dao.search_questions(
                search_term=search_term.strip(),
                page=page,
                per_page=per_page,
                filters=filters or {}
            )
            
            return {
                'success': True,
                'data': result
            }
            
        except ValidationException:
            raise
        except Exception as e:
            raise ValidationException(f"L·ªói khi t√¨m ki·∫øm c√¢u h·ªèi: {str(e)}")
    
    def get_user_questions(self, user_id, page=1, per_page=20):
        """
        L·∫•y danh s√°ch c√¢u h·ªèi c·ªßa user
        
        Args:
            user_id: ID ng∆∞·ªùi d√πng
            page: S·ªë trang
            per_page: S·ªë c√¢u h·ªèi m·ªói trang
            
        Returns:
            dict: Danh s√°ch c√¢u h·ªèi c·ªßa user
        """
        try:
            # Validate pagination
            page = max(1, int(page))
            per_page = min(50, max(1, int(per_page)))
            
            # Get user questions
            result = self.question_dao.get_user_questions(
                user_id=user_id,
                page=page,
                per_page=per_page
            )
            
            return {
                'success': True,
                'data': result
            }
            
        except Exception as e:
            raise ValidationException(f"L·ªói khi l·∫•y c√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng: {str(e)}")
    
    def get_trending_questions(self, limit=10, time_frame='week'):
        """
        L·∫•y c√¢u h·ªèi trending
        
        Args:
            limit: S·ªë l∆∞·ª£ng c√¢u h·ªèi
            time_frame: Khung th·ªùi gian (day, week, month)
            
        Returns:
            dict: Danh s√°ch c√¢u h·ªèi trending
        """
        try:
            questions = self.question_dao.get_trending_questions(
                limit=limit,
                time_frame=time_frame
            )
            
            return {
                'success': True,
                'data': [q.to_dict() for q in questions]
            }
            
        except Exception as e:
            raise ValidationException(f"L·ªói khi l·∫•y c√¢u h·ªèi trending: {str(e)}")
    
    def get_related_questions(self, question_id, limit=5):
        """
        L·∫•y c√¢u h·ªèi li√™n quan
        
        Args:
            question_id: ID c√¢u h·ªèi
            limit: S·ªë l∆∞·ª£ng c√¢u h·ªèi li√™n quan
            
        Returns:
            dict: Danh s√°ch c√¢u h·ªèi li√™n quan
        """
        try:
            questions = self.question_dao.get_related_questions(
                question_id=question_id,
                limit=limit
            )
            
            return {
                'success': True,
                'data': [q.to_dict() for q in questions]
            }
            
        except Exception as e:
            raise ValidationException(f"L·ªói khi l·∫•y c√¢u h·ªèi li√™n quan: {str(e)}")
    
    def _validate_question_data(self, data, is_update=False):
        """Validate question data"""
        errors = {}
        
        # Title validation
        if not is_update or 'title' in data:
            title = data.get('title', '').strip()
            if not title:
                errors['title'] = ['Ti√™u ƒë·ªÅ kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng']
            elif len(title) < 10:
                errors['title'] = ['Ti√™u ƒë·ªÅ ph·∫£i c√≥ √≠t nh·∫•t 10 k√Ω t·ª±']
            elif len(title) > 200:
                errors['title'] = ['Ti√™u ƒë·ªÅ kh√¥ng ƒë∆∞·ª£c qu√° 200 k√Ω t·ª±']
        
        # Content validation
        if not is_update or 'content' in data:
            content = data.get('content', '').strip()
            if not content:
                errors['content'] = ['N·ªôi dung kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng']
            elif len(content) < 20:
                errors['content'] = ['N·ªôi dung ph·∫£i c√≥ √≠t nh·∫•t 20 k√Ω t·ª±']
        
        # Category validation
        if data.get('category'):
            valid_categories = ['general', 'technical', 'course', 'assignment']
            if data['category'] not in valid_categories:
                errors['category'] = ['Danh m·ª•c kh√¥ng h·ª£p l·ªá']
        
        # Scope validation
        if data.get('scope'):
            valid_scopes = ['course', 'chapter', 'lesson', 'quiz', 'assignment']
            if data['scope'] not in valid_scopes:
                errors['scope'] = ['Ph·∫°m vi kh√¥ng h·ª£p l·ªá. C√°c gi√° tr·ªã h·ª£p l·ªá: course, chapter, lesson, quiz, assignment']
        
        if errors:
            raise ValidationException(errors)
    
    def _process_filters(self, filters):
        """Process and validate filters"""
        processed = {}
        
        if filters.get('category'):
            processed['category'] = filters['category']
        
        if filters.get('scope'):
            processed['scope'] = filters['scope']
        
        if filters.get('scope_id'):
            processed['scope_id'] = filters['scope_id']
        
        if filters.get('status'):
            processed['status'] = filters['status']
        
        if filters.get('authorId'):
            processed['author_id'] = filters['authorId']
        
        if filters.get('courseId'):
            processed['course_id'] = filters['courseId']
        
        if filters.get('tags'):
            processed['tags'] = filters['tags']
        
        if filters.get('hasAnswers') is not None:
            processed['has_answers'] = filters['hasAnswers']
        
        if filters.get('isAccepted') is not None:
            processed['is_accepted'] = filters['isAccepted']
        
        return processed
    
    def _process_question_tags(self, question_id, tag_names):
        """Process and update question tags"""
        try:
            tag_ids = []
            
            for tag_name in tag_names:
                tag_name = tag_name.strip().lower()
                if not tag_name:
                    continue
                
                # Get or create tag
                tag = self.tag_dao.get_tag_by_name(tag_name)
                if not tag:
                    tag = self.tag_dao.create_tag(tag_name)
                
                tag_ids.append(tag.id)
            
            # Update question tags
            self.tag_dao.update_question_tags(question_id, tag_ids)
            
        except Exception as e:
            raise ValidationException(f"L·ªói khi x·ª≠ l√Ω tag: {str(e)}")